{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/SignOut/index.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","constants/routes.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/Home/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","ref","users","app","initializeApp","this","database","type","onClick","AuthUserContext","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","withAuthorization","condition","WithAuthorization","history","push","compose","withRouter","Navigation","loading","NavigationAuth","to","SignOut","NavigationNonAuth","LandingPage","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","then","set","catch","preventDefault","onChange","target","name","isInvalid","placeholder","disabled","message","SignUpLink","SignUpForm","SignUpPage","PasswordForgetFormBase","PasswordForgetLink","style","color","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","PasswordChangeForm","PasswordChange","AdminPage","console","log","on","snapshot","usersObject","val","usersList","Object","keys","map","key","off","UserList","exact","path","component","HomePage","AccountPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67275acb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nconst FirebaseContext = React.createContext(null);\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n      {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n  );\nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/auth'\nimport 'firebase/database';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB2U5HcUXfL0Rg891lDHFthV29XzzSIfxw\",\n  authDomain: \"hyeonsu1984.firebaseapp.com\",\n  databaseURL: \"https://hyeonsu1984.firebaseio.com\",\n  projectId: \"hyeonsu1984\",\n  storageBucket: \"hyeonsu1984.appspot.com\",\n  messagingSenderId: \"30317301704\",\n  appId: \"1:30317301704:web:45d061c7e02278fdf63afd\",\n  measurementId: \"G-HRL0X3LR43\"\n};\nclass Firebase {\n  constructor() {\n    //console.log(firebaseConfig.apiKey);\n    app.initializeApp(firebaseConfig);\n    this.auth = app.auth();\n    this.db = app.database();\n    \n  }\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n  doSignOut = () => this.auth.signOut();\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  user = (uid) => this.db.ref(`users/${uid}`);\n  users = () => this.db.ref('users/');\n\n}\nexport default Firebase;","\nimport FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\nexport default Firebase;\nexport { FirebaseContext,withFirebase};","import React from 'react';\nimport { withFirebase } from '../Firebase';\nconst SignOutButton = ({ firebase }) => (\n  <button type=\"button\" onClick={firebase.doSignOut}>\n    Sign Out\n  </button>\n);\nexport default withFirebase(SignOutButton);","import React from 'react';\nconst AuthUserContext = React.createContext(null);\nexport default AuthUserContext;","import React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null,\n      };\n    }\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          authUser\n            ? this.setState({ authUser })\n            : this.setState({ authUser: null });\n        },\n      );\n    }\n    componentWillUnmount() {\n      this.listener();\n    }\n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n  return withFirebase(WithAuthentication);\n};\nexport default withAuthentication;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n      );\n    }\n    componentWillUnmount() {\n      this.listener();\n    }\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthorization);\n};\nexport default withAuthorization;","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\nimport {AuthUserContext} from '../Session' ;\nclass Navigation extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      loading:true\n    }\n  }\n  render(){\n    return(\n   <AuthUserContext.Consumer>\n      {authUser =>\n        authUser ? <NavigationAuth /> : <NavigationNonAuth />\n      }\n    </AuthUserContext.Consumer>\n    );\n  }\n}\nconst NavigationAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.HOME}>Home</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.ACCOUNT}>Account</Link>\n      \n    </li>\n    <li>\n      <Link to={ROUTES.ADMIN}>Admin</Link>\n    </li>\n    <li>\n      <SignOutButton />\n    </li>\n  </ul>\n);\nconst NavigationNonAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.LANDING}>Landing</Link>\n    </li>\n    <li>\n      <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n    </li>\n  </ul>\n);\nexport default Navigation;","import React from 'react';\nconst LandingPage = () => (\n  <div>\n    <h1>Welcome to ICISTS Investment Game!</h1>\n  </div>\n);\nexport default LandingPage;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport { withFirebase } from '../Firebase';\nimport { compose } from 'recompose';\n\nconst SignUpPage = () => (\n  <div>\n    <h1>SignUp</h1>\n      <SignUpForm />\n  </div>\n);\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n    this.props.firebase\n      .doCreateUserWithEmailAndPassword(email, passwordOne)\n      .then(authUser => {\n        // Create a user in your Firebase realtime database\n    //    this.props.firebase.user('test').set({});\n        return this.props.firebase\n          .user(authUser.user.uid)\n          .set({\n            username,\n            email,\n          });\n         \n      })\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  }\n\n    onChange = event => {\n      this.setState({ [event.target.name]: event.target.value });\n    };\n\n  render() {\n    const {\n      username,\n      email,\n      passwordOne,\n      passwordTwo,\n      error,\n    } = this.state;\n    const isInvalid =( passwordOne !== passwordTwo || passwordOne === '' || email === '' || username === '');\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"username\"\n          value={username}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Full Name\"\n        />\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">Sign Up</button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n  </p>\n);\nconst SignUpForm = compose(\n  withRouter,\n  withFirebase,\n)(SignUpFormBase);\nexport default SignUpPage;\nexport { SignUpForm, SignUpLink };","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nconst PasswordForgetPage = () => (\n  <div>\n    <h1>PasswordForget</h1>\n    <PasswordForgetForm />\n  </div>\n);\nconst INITIAL_STATE = {\n  email: '',\n  error: null,\n};\nclass PasswordForgetFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { email } = this.state;\n    this.props.firebase\n      .doPasswordReset(email)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { email, error } = this.state;\n    const isInvalid = email === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={this.state.email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nconst PasswordForgetLink = () => (\n  <p>\n    <Link style={{color:'red'}} to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\nexport default PasswordForgetPage;\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\nexport { PasswordForgetForm, PasswordForgetLink };","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { SignUpLink } from '../SignUp';\nimport { withFirebase } from '../Firebase';\nimport { PasswordForgetLink } from '../PasswordForget';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n  <div>\n    <h1>SignIn</h1>\n    <SignInForm />\n    <PasswordForgetLink />\n    <SignUpLink />\n  </div>\n);\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { email, password } = this.state;\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { email, password, error } = this.state;\n    const isInvalid = password === '' || email === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nconst SignInForm = compose(\n  withRouter,\n  withFirebase,\n)(SignInFormBase);\nexport default SignInPage;\nexport { SignInForm };","import React from 'react';\nimport { withAuthorization } from '../Session';\nconst HomePage = () => (\n  <div>\n    <h1>Home Page</h1>\n    <p>여기에 투자 게임 구현할 예정</p>\n    <p>지금처럼 회원가입 하는 게 아니라</p>\n    <p>대안으로 각 팀별로 미리 정해져 있는 입장코드 주고 로그인 시키는 거 생각 중</p>\n  </div>\n);\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(HomePage);","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\nconst INITIAL_STATE = {\n  passwordOne: '',\n  passwordTwo: '',\n  error: null,\n};\nclass PasswordChangeForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = event => {\n    const { passwordOne } = this.state;\n    this.props.firebase\n      .doPasswordUpdate(passwordOne)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n    event.preventDefault();\n  };\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const { passwordOne, passwordTwo, error } = this.state;\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === '';\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Reset My Password\n        </button>\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\nexport default withFirebase(PasswordChangeForm);","import React from 'react';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport { AuthUserContext, withAuthorization } from '../Session';\nimport PasswordChangeForm from '../PasswordChange';\n\nconst AccountPage = () => (\n  <AuthUserContext.Consumer>\n  {authUser => (\n    <div>\n      <h1>Account: {authUser.email}</h1>\n      <PasswordForgetForm />\n      <PasswordChangeForm />\n    </div>\n  )}\n</AuthUserContext.Consumer>\n);\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(AccountPage); ","import React, { Component } from 'react';\nimport { AuthUserContext, withAuthorization } from '../Session';\nimport { withFirebase } from '../Firebase';\n\nclass AdminPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      users: [],\n    };\n  }\n  componentDidMount() {\n    console.log('AdminPage did mount');\n\n    this.setState({ loading: true });\n    this.props.firebase.users().on('value', snapshot => {\n      const usersObject = snapshot.val();\n      if (usersObject == null) {\n        const usersList = [];\n        this.setState({\n          users: usersList,\n          loading: false,\n        });\n      }\n      else {\n        const usersList = Object.keys(usersObject).map(key => ({\n          ...usersObject[key],\n          uid: key,\n        }));\n        this.setState({\n          users: usersList,\n          loading: false,\n        });\n      }\n      \n    });\n  }\n  componentWillUnmount() {\n    console.log('AdminPage will unmount');\n    this.props.firebase.users().off();\n  }\n  render() {\n    const { users, loading } = this.state;\n    return (\n      <div>\n        <h1>Admin</h1>\n        {loading && <div>Loading ...</div>}\n        <UserList users={users} />\n      </div>\n    );\n  }\n}\nconst UserList = ({ users }) => {\n  if (users == null)\n    return (<div>df</div>);\n  else {\n    return (\n      <ul>\n        {users.map(user => (\n          <li key={user.uid}>\n            <p>\n              <strong>Username:</strong> {user.username}\n            </p>\n            <p>\n              <strong>E-Mail:</strong> {user.email}\n            </p>\n            <p>\n              <strong> ID:</strong> {user.uid}\n            </p>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(AdminPage); ","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session';\n\n\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation />\n      <hr />\n      <Route exact path={ROUTES.LANDING} component={LandingPage} />\n      <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n      <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n      <Route\n        path={ROUTES.PASSWORD_FORGET}\n        component={PasswordForgetPage}\n      />\n      <Route path={ROUTES.HOME} component={HomePage} />\n      <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      <Route path={ROUTES.ADMIN} component={AdminPage} />\n    </div>\n  </Router>\n);\nexport default withAuthentication(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nimport Firebase, { FirebaseContext } from './components/Firebase';\nReactDOM.render(<FirebaseContext.Provider value={new Firebase()}>\n    <App />\n    </FirebaseContext.Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}